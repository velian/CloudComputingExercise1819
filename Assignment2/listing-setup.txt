# QEMU setup

# We are using a Google Cloud instance as host, which means we have to enable nested virtualization first

# Create a debian 10 image with the necessary license
gcloud compute disks create disk1 --image-project debian-cloud --image-family debian-10 --zone europe-west3-a
gcloud compute images create nested-vm-image --source-disk disk1 --source-disk-zone europe-west3-a --licenses "https://www.googleapis.com/compute/v1/projects/vm-options/global/licenses/enable-vmx"

# Now you can delete the disk again
gcloud compute disks delete disk1 --zone europe-west3-a

# Create an instance based on that image
# All CPU generations availble in the europe-west3-a zone support nested VMs, but in other --min-cpu-platform "Intel Haswell" might be needed to ensure virtualization support
gcloud compute instances create nested-vm --zone europe-west3-a --image nested-vm-image

# Conncect to the instance
gcloud compute ssh nested-vm

# Install qemu and libguestfs-tools (you might have to select a keyboard layout)
sudo apt-get update && sudo apt-get install qemu-kvm libguestfs-tools -y

# Create a file that contains your password for the VM
echo [your password] > password.txt

# Create the image with the password
sudo virt-builder debian-10 \
--size=10G \
--format qcow2 -o debian10.qcow2 \
--hostname debian10 \
--network \
--root-password file:password.txt

# We need to set up a bridge so the VM can communicate with the host
# Install required packages
sudo apt-get install uml-utilities qemu-kvm bridge-utils virtinst libvirt-daemon-system libvirt-clients -y

# Start default network
sudo virsh net-start default

# Create the bridge
sudo tunctl -t tap0
sudo ifconfig tap0 up
sudo brctl addif virbr0 tap0


# Install screen and start a screen session so you can easily switch between guest and host (press enter if the confirmation screen comes up)
sudo apt-get install screen
screen

# Start the VM with access to the bridge (add -enable-kvm to enable KVM support)
# Login as root with the password you just set
sudo qemu-system-x86_64 -m 2048 -net nic -net tap,ifname=tap0,script=no -serial mon:stdio -nographic debian10.qcow2

# Start up the VM's network access
ip link set dev ens3 up
dhclient -v ens3

# Now you can see your IP with
ip adress show

# Leave the screen session with CTRL+A, CTRL+D
# You can return to it with screen -r


# Docker setup

# Apparently apt-get install docker.io only gets you an out-of-date version, so we are going to follow the official instructions
# Enable apt to download packages over HTTPS
sudo apt-get update
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
	

# Add Docker's GPG key
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

# Add the docker repository
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/debian \
   $(lsb_release -cs) \
   stable"
   
# Install docker
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io

# Start a screen session
screen 

# Start a debian 10 container (it will be pulled automatically if not already present)
sudo docker run --rm -ti debian:10

# Communication with the host should work out of the box here, you can again get your IP with
ip adress show

# This container is very minimal, so we might have to install the packages we need for the benchmarks
sudo apt-get update

# Install whatever you need
