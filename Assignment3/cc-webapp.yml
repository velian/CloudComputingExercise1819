- hosts: all
  remote_user: root

  tasks:
  - name: Install pip3
    apt:
      name: python3-pip
      
  - name: Install openshift
    pip:
      name: openshift
    
  - name: Create a k8s namespace
    k8s:
      name: testing
      api_version: v1
      kind: Namespace
      state: present
        
  - name: Create the backend Deployment object from an inline definition
    k8s:
      state: present
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          namespace: testing
          name: backend-deployment
          labels:
            app: nginx
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: nginx
          template:
            metadata:
              namespace: testing
              labels:
                app: nginx
            spec:
              containers:
              - name: nginx
                image: jlo2020/methods-of-cloud-computing-ws-2019:backend
                imagePullPolicy: Always
                ports:
                - name: http
                  containerPort: 80
                livenessProbe:
                  httpGet:
                    path: /ready
                    port: 80
                    httpHeaders:
                      - name: CC-Ready
                        value: backend
                  initialDelaySeconds: 15  
                  timeoutSeconds: 1
                  name: liveness-backend
                readinessProbe:
                  httpGet:
                    path: /ready
                    port: 80
                    httpHeaders:
                      - name: CC-Ready
                        value: backend
                  initialDelaySeconds: 15  
                  timeoutSeconds: 1
                  name: readiness-backend
                
  - name: Create the backend Service object from an inline definition
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          namespace: testing
          name: cc-backend-service
          labels:
            app: nginx
        spec:
          selector:
            app: nginx
          type: ClusterIP
          ports:
            - protocol: TCP
              port: 80
              targetPort: http

  - name: Create the frontend Deployment object from an inline definition
    k8s:
      state: present
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          namespace: testing
          name: frontend-deployment
          labels:
            app: nginx-frontend
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: nginx-frontend
          template:
            metadata:
              namespace: testing
              labels:
                app: nginx-frontend
            spec:
              containers:
              - name: nginx-frontend
                image: jlo2020/methods-of-cloud-computing-ws-2019:frontend
                imagePullPolicy: Always
                ports:
                - name: http
                  containerPort: 80
                livenessProbe:
                  httpGet:
                    path: /ready
                    port: 80
                    httpHeaders:
                      - name: CC-Ready
                        value: frontend
                  initialDelaySeconds: 15  
                  timeoutSeconds: 1
                  name: liveness-frontend
                readinessProbe:
                  httpGet:
                    path: /ready
                    port: 80
                    httpHeaders:
                      - name: CC-Ready
                        value: frontend
                  initialDelaySeconds: 15  
                  timeoutSeconds: 1
                  name: readiness-frontend

  - name: Create the frontend Service object from an inline definition
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          namespace: testing
          name: cc-frontend-service
          labels:
            app: nginx-frontend
        spec:
          selector:
            app: nginx-frontend
          type: NodePort
          ports:
            - protocol: TCP
              port: 80
              targetPort: http

